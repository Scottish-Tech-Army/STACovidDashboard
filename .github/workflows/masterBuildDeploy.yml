# Build, test and deploy to live the master branch on push or PR merge
# Requires manual approval after functional tests run successfully on staging

name: Master Dashboard Build Test and Deploy

on:
  # Triggers the workflow on push event (which should include PR merges) for the master branch
  push:
    branches: [master]
    paths-ignore:
      - 'awsLambdaFunctions/**'
      - 'lambdaFunctions/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  S3_BUILD_PATH: s3://sta-dashboard-builds/builds/master/${{ github.sha }}/
  S3_STAGING_DEPLOY_PATH: s3://sta-dashboard-staging/
  STAGING_URL: http://sta-dashboard-staging.s3-website.eu-west-2.amazonaws.com

jobs:
  # Build and deploy the candidate to staging
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and copy artifacts
        run: |
          cd reactDashboard
          npm install
          npm test -- --watchAll=false
          npm run build
          aws s3 cp build $S3_STAGING_DEPLOY_PATH --recursive
          aws s3 cp build $S3_BUILD_PATH --recursive --exclude "data/*"

      - name: Build output
        run: |
          echo S3 build archive: $S3_BUILD_PATH
          echo S3 staging deployment: $S3_STAGING_DEPLOY_PATH

  # Run functional tests against staging
  functionalTests:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Run functional tests
        run: |
          cd functionalTest
          npm install
          npm test -- --baseUrl $STAGING_URL

  deployToLive:
    needs: [build, functionalTests]
    environment:
      name: Live
    runs-on: ubuntu-latest
    env:
      CLOUDFRONT_DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
      S3_TARGET_BUCKET: ${{ secrets.AWS_S3_SITE_BUCKET }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy build to live
        run: aws s3 cp $S3_BUILD_PATH s3://$S3_TARGET_BUCKET/ --recursive

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id "$CLOUDFRONT_DISTRIBUTION" --paths "/*"
